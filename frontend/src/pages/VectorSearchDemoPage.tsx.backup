// Vector Search Demo Page - TiDB Vector Search Showcase
import { useState, useEffect } from 'react';
import { 
  Brain, 
  Search, 
  Target, 
  Route, 
  MapPin, 
  Clock, 
  Zap, 
  CheckCircle, 
  AlertCircle,
  ArrowRight,
  Database,
  Activity,
  ChevronDown,
  ChevronUp,
  Loader2
} from 'lucide-react';
import api from '../services/api';

// TypeScript Interfaces for better type safety
interface Request {
  id: number;
  name: string;
  people_count: number;
  needs: string;
  features_required: string;
  lat: string;
  lng: string;
  phone: string;
  urgency: 'low' | 'medium' | 'high';
  status: 'pending' | 'assigned' | 'completed';
  assigned_shelter_id?: number;
  assigned_at?: string;
  created_at: string;
  updated_at: string;
  assigned_shelter_name?: string;
}

interface VectorMatch {
  shelter_id: number;
  shelter_name: string;
  features: string;
  available_capacity: number;
  distance_km: number;
  vector_similarity: number;
  cosine_distance: number;
  tidb_search_method: string;
  vector_index_used: string;
}

interface WorkflowStepData {
  request_id: string;
  tidb_vector_features_used?: string[];
  search_algorithm?: string;
  matches_found?: number;
  best_match_similarity?: number;
  vector_search_results?: VectorMatch[];
  [key: string]: any;
}

interface WorkflowStep {
  step: string;
  agent: string;
  status: 'completed' | 'failed' | 'in_progress';
  data: WorkflowStepData;
  matches?: VectorMatch[];
  selected_shelter?: VectorMatch;
  execution_time: number;
}

interface TiDBVectorShowcase {
  core_features: string[];
  performance_metrics: {
    vector_search_time_ms: number;
    matches_found: number;
    best_match_similarity?: number;
  };
}

interface WorkflowResults {
  success: boolean;
  message?: string;
  request_id: string;
  workflow_steps: WorkflowStep[];
  total_execution_time: number;
  status: 'completed' | 'failed' | 'in_progress';
  tidb_vector_features_demonstrated: string[];
  tidb_vector_search_showcase?: TiDBVectorShowcase;
  // Legacy support for existing API structure
  steps_completed?: WorkflowStep[];
  final_assignment?: any;
}

interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  requests?: T;
  error?: string;
  message?: string;
}

// Remove duplicate interfaces - using the ones defined above

export default function VectorSearchDemoPage() {
  const [requests, setRequests] = useState<Request[]>([]);
  const [selectedRequest, setSelectedRequest] = useState<number | null>(null);
  const [isExecuting, setIsExecuting] = useState<boolean>(false);
  const [executionProgress, setExecutionProgress] = useState<string>('');
  const [workflowResults, setWorkflowResults] = useState<WorkflowResults | null>(null);
  const [requestsLoading, setRequestsLoading] = useState<boolean>(false);
  const [requestsError, setRequestsError] = useState<string | null>(null);

  useEffect(() => {
    fetchPendingRequests();
  }, []);

  const fetchPendingRequests = async () => {
    setRequestsLoading(true);
    setRequestsError(null);
    try {
      const response = await api.get('/requests?status=pending&limit=10') as ApiResponse<Request[]>;
      
      // Handle different response structures - API returns { success: true, requests: [...] }
      let requestsData: Request[] = [];
      
      if (response.requests && Array.isArray(response.requests)) {
        requestsData = response.requests;
      } else if (response.data && Array.isArray(response.data)) {
        requestsData = response.data;
      } else if (Array.isArray(response)) {
        requestsData = response as Request[];
      }
      
      setRequests(requestsData);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch requests';
      console.error('Failed to fetch requests:', error);
      setRequestsError(errorMessage);
      setRequests([]);
    } finally {
      setRequestsLoading(false);
    }
  };

  const executeVectorWorkflow = async (requestId: number) => {
    setIsExecuting(true);
    setExecutionProgress('Initializing multi-step agent workflow...');
    setWorkflowResults(null);

    try {
      // Execute the complete multi-step workflow
      const apiUrl = process.env.NODE_ENV === 'production' 
        ? '/api/agents/demo-workflow/execute/' 
        : 'http://localhost:3000/api/agents/demo-workflow/execute/';
      
      const response = await fetch(`${apiUrl}${requestId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      setWorkflowResults(data);
      setExecutionProgress('Workflow completed successfully!');
    } catch (error) {
      console.error('Workflow execution failed:', error);
      setExecutionProgress('Workflow execution failed');
    } finally {
      setIsExecuting(false);
    }
  };

  const getStepIcon = (stepName: string) => {
    const icons: Record<string, JSX.Element> = {
      'intake': <Activity className="h-5 w-5" />,
      'embedding': <Brain className="h-5 w-5" />,
      'vector_search': <Database className="h-5 w-5" />,
      'tidb_vector_search': <Database className="h-5 w-5" />,
      'matching': <Target className="h-5 w-5" />,
      'routing': <Route className="h-5 w-5" />,
      'assignment': <CheckCircle className="h-5 w-5" />,
      'rebalancing': <Zap className="h-5 w-5" />
    };
    
    // Try exact match first, then try to extract the main step name
    const normalizedStep = stepName.split('_')[0];
    return icons[stepName] || icons[normalizedStep] || <Activity className="h-5 w-5" />;
  };

  const getStepColor = (status: string) => {
    switch (status) {
      case 'completed': return 'text-green-600 bg-green-100';
      case 'failed': return 'text-red-600 bg-red-100';
      default: return 'text-blue-600 bg-blue-100';
    }
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-4xl font-bold text-slate-900 mb-4">
          ðŸŽ¯ TiDB Vector Search Showcase
        </h1>
        <p className="text-lg text-slate-600 mb-4">
          Demonstration of multi-step agent workflow with TiDB Vector Search integration
        </p>
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h3 className="font-semibold text-blue-900 mb-2">Agent Workflow Chain:</h3>
          <div className="flex items-center space-x-2 text-sm text-blue-800">
            <span className="bg-blue-200 px-2 py-1 rounded">Intake Agent</span>
            <ArrowRight className="h-4 w-4" />
            <span className="bg-blue-200 px-2 py-1 rounded">Vector Embedding</span>
            <ArrowRight className="h-4 w-4" />
            <span className="bg-green-200 px-2 py-1 rounded font-semibold">TiDB Vector Search</span>
            <ArrowRight className="h-4 w-4" />
            <span className="bg-blue-200 px-2 py-1 rounded">Matching Agent</span>
            <ArrowRight className="h-4 w-4" />
            <span className="bg-blue-200 px-2 py-1 rounded">Routing Agent</span>
            <ArrowRight className="h-4 w-4" />
            <span className="bg-blue-200 px-2 py-1 rounded">Assignment</span>
          </div>
        </div>
      </div>

      <div className="grid lg:grid-cols-3 gap-6">
        {/* Request Selection */}
        <div className="bg-white rounded-lg shadow-sm border border-slate-200">
          <div className="p-4 border-b border-slate-200">
            <h2 className="text-lg font-semibold text-slate-900 flex items-center">
              <Search className="h-5 w-5 mr-2" />
              Select Request to Process
            </h2>
          </div>
          <div className="p-4 space-y-3">
            {requests.length === 0 ? (
              <p className="text-slate-500 text-center py-4">No pending requests available</p>
            ) : (
              requests.map((request: any) => (
                <div
                  key={request.id}
                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                    selectedRequest === request.id 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-slate-200 hover:border-slate-300'
                  }`}
                  onClick={() => setSelectedRequest(request.id)}
                >
                  <div className="font-medium text-slate-900">{request.name}</div>
                  <div className="text-sm text-slate-600">
                    {request.people_count} people â€¢ {request.urgency} urgency
                  </div>
                  <div className="text-xs text-slate-500 mt-1">
                    {request.needs.substring(0, 100)}...
                  </div>
                </div>
              ))
            )}
            
            {selectedRequest && (
              <button
                onClick={() => executeVectorWorkflow(selectedRequest)}
                disabled={isExecuting}
                className="w-full mt-4 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isExecuting ? 'Executing Workflow...' : 'ðŸš€ Execute TiDB Vector Workflow'}
              </button>
            )}
            
            {executionProgress && (
              <div className="mt-3 p-2 bg-slate-100 rounded text-sm text-slate-700">
                {executionProgress}
              </div>
            )}
          </div>
        </div>

        {/* Workflow Steps */}
        <div className="lg:col-span-2 bg-white rounded-lg shadow-sm border border-slate-200">
          <div className="p-4 border-b border-slate-200">
            <h2 className="text-lg font-semibold text-slate-900 flex items-center">
              <Activity className="h-5 w-5 mr-2" />
              Multi-Step Agent Workflow Progress
            </h2>
          </div>
          <div className="p-4">
            {!workflowResults ? (
              <div className="text-center py-12 text-slate-500">
                <Database className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>Select a request and execute the workflow to see TiDB Vector Search in action</p>
              </div>
            ) : (
              <div className="space-y-4">
                {/* Workflow Overview */}
                <div className="bg-slate-50 rounded-lg p-4 mb-6">
                  <h3 className="font-semibold text-slate-900 mb-2">Workflow Summary</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                      <div className="text-2xl font-bold text-green-600">
                        {(workflowResults.workflow_steps || workflowResults.steps_completed || []).length}
                      </div>
                      <div className="text-sm text-slate-600">Steps Completed</div>
                    </div>
                    <div>
                      <div className="text-2xl font-bold text-blue-600">
                        {workflowResults.total_execution_time}ms
                      </div>
                      <div className="text-sm text-slate-600">Total Time</div>
                    </div>
                    <div>
                      <div className="text-2xl font-bold text-purple-600">
                        {workflowResults.tidb_vector_search_showcase?.performance_metrics?.matches_found || 0}
                      </div>
                      <div className="text-sm text-slate-600">Vector Matches</div>
                    </div>
                    <div>
                      <div className="text-2xl font-bold text-orange-600">
                        {workflowResults.tidb_vector_search_showcase?.performance_metrics?.best_match_similarity 
                          ? (workflowResults.tidb_vector_search_showcase.performance_metrics.best_match_similarity * 100).toFixed(1) 
                          : 0}%
                      </div>
                      <div className="text-sm text-slate-600">Best Similarity</div>
                    </div>
                  </div>
                </div>

                {/* Step-by-step breakdown */}
                {workflowResults.steps_completed.map((step, index) => (
                  <div key={step.workflow_step} className="border border-slate-200 rounded-lg">
                    <div className="p-4 bg-slate-50 border-b border-slate-200">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className={`p-2 rounded-lg ${getStepColor(step.status)}`}>
                            {getStepIcon(step.workflow_step)}
                          </div>
                          <div>
                            <h4 className="font-semibold text-slate-900 capitalize">
                              {step.workflow_step.replace('_', ' ')} Agent
                            </h4>
                            <p className="text-sm text-slate-600">{step.agent_name}</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-sm font-medium text-slate-900">
                            {step.execution_time_ms}ms
                          </div>
                          <div className={`text-xs ${
                            step.status === 'completed' ? 'text-green-600' : 
                            step.status === 'failed' ? 'text-red-600' : 'text-blue-600'
                          }`}>
                            {step.status}
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* TiDB Vector Search Special Showcase */}
                    {step.workflow_step === 'vector_search' && step.step_data && (
                      <div className="p-4 bg-green-50">
                        <h5 className="font-semibold text-green-900 mb-3 flex items-center">
                          <Database className="h-4 w-4 mr-2" />
                          TiDB Vector Search Results
                        </h5>
                        
                        <div className="grid grid-cols-3 gap-4 mb-4">
                          <div className="bg-white rounded p-3 text-center">
                            <div className="text-lg font-bold text-green-600">
                              {step.step_data.tidb_vector_search_method}
                            </div>
                            <div className="text-xs text-slate-600">Search Method</div>
                          </div>
                          <div className="bg-white rounded p-3 text-center">
                            <div className="text-lg font-bold text-green-600">
                              {step.step_data.search_algorithm}
                            </div>
                            <div className="text-xs text-slate-600">Algorithm</div>
                          </div>
                          <div className="bg-white rounded p-3 text-center">
                            <div className="text-lg font-bold text-green-600">
                              {step.step_data.search_performance.execution_time_ms}ms
                            </div>
                            <div className="text-xs text-slate-600">Search Time</div>
                          </div>
                        </div>

                        {/* Vector Search Results */}
                        <div className="space-y-2">
                          <h6 className="font-medium text-green-800">Top Vector Matches:</h6>
                          {step.step_data.vector_search_results?.slice(0, 3).map((match: VectorMatch, idx: number) => (
                            <div key={match.shelter_id} className="bg-white rounded p-3 border border-green-200">
                              <div className="flex justify-between items-center">
                                <div>
                                  <div className="font-medium text-slate-900">{match.shelter_name}</div>
                                  <div className="text-sm text-slate-600">
                                    {match.geographic_distance_km.toFixed(1)}km â€¢ {match.available_capacity} available
                                  </div>
                                </div>
                                <div className="text-right">
                                  <div className="text-lg font-bold text-green-600">
                                    {(match.vector_similarity_score * 100).toFixed(1)}%
                                  </div>
                                  <div className="text-xs text-slate-500">Similarity</div>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>

                        {/* TiDB Features Used */}
                        <div className="mt-4 bg-white rounded p-3 border border-green-200">
                          <h6 className="font-medium text-green-800 mb-2">TiDB Vector Features Used:</h6>
                          <div className="flex flex-wrap gap-2">
                            {step.step_data.tidb_vector_features_used?.map((feature: string, idx: number) => (
                              <span key={idx} className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded">
                                {feature}
                              </span>
                            ))}
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {/* Other step details */}
                    {step.workflow_step !== 'vector_search' && step.step_data && (
                      <div className="p-4">
                        <div className="text-sm text-slate-600">
                          {JSON.stringify(step.step_data, null, 2).substring(0, 200)}...
                        </div>
                      </div>
                    )}
                  </div>
                ))}

                {/* Final Assignment */}
                {workflowResults.final_assignment && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <h3 className="font-semibold text-green-900 mb-2 flex items-center">
                      <CheckCircle className="h-5 w-5 mr-2" />
                      Final Assignment Complete
                    </h3>
                    <div className="text-sm text-green-800">
                      Request {workflowResults.request_id} successfully assigned to Shelter {workflowResults.final_assignment.shelter_id} 
                      using TiDB Vector Search workflow
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
